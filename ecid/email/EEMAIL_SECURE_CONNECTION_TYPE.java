/*
 * ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * -----------------------------------------------------------------------------
 */

package com.android.server.ecid.email;


import com.android.server.ecid.utils.GeneralParserAttribute;

/*
 * LGSI_CHANGE_PROTOCOL Shrey Chaturvedi 20 Dec 2013
 * Modified the enum types with HostAuth constants.
 * These flag values are referred by engine during authentication process
 */
public enum EEMAIL_SECURE_CONNECTION_TYPE implements GeneralParserAttribute {

	//if security is 0 then basic authentication should occur

	//if security is 0 then basic authentication should occur
	// LGE_CHANGE_LGBackUpFrom41To60 jihoon7.jung, Do not use these three items
	eEMAIL_SECURE_CONNECTION_TYPE_SSL_CONFIRM(1),
	eEMAIL_SECURE_CONNECTION_TYPE_TLS_CONFIRM(2),
	eEMAIL_SECURE_CONNECTION_TYPE_TLS_CONFIRM_IF_AVAILABLE(3),
	// LGE_CHANGE_LGBackUpFrom41To60 jihoon7.jung, Do not use these three items
	eEMAIL_SECURE_CONNECTION_TYPE_NONE(FLAG_AUTHENTICATE), 
	eEMAIL_SECURE_CONNECTION_TYPE_SSL(FLAG_SSL | FLAG_AUTHENTICATE), 
	eEMAIL_SECURE_CONNECTION_TYPE_TLS(FLAG_TLS | FLAG_AUTHENTICATE), 
	eEMAIL_SECURE_CONNECTION_TYPE_TLS_IF_AVAILABLE(FLAG_TLS | FLAG_AUTHENTICATE | FLAG_TLS_IF_AVAILABLE),
	eEMAIL_SECURE_CONNECTION_TYPE_SSL_TRUST_ALL(FLAG_SSL | FLAG_TRUST_ALL
			| FLAG_AUTHENTICATE), 
			eEMAIL_SECURE_CONNECTION_TYPE_TLS_TRUST_ALL(FLAG_TLS | FLAG_TRUST_ALL
					| FLAG_AUTHENTICATE), 
					eEMAIL_SECURE_CONNECTION_TYPE_TLS_TRUST_ALL_IF_AVAILABLE(FLAG_TLS
							| FLAG_TRUST_ALL
							| FLAG_AUTHENTICATE | FLAG_TLS_IF_AVAILABLE);


	public final int swigValue() {
		return swigValue;
	}

	public static EEMAIL_SECURE_CONNECTION_TYPE swigToEnum(int swigValue) {
		EEMAIL_SECURE_CONNECTION_TYPE[] swigValues = EEMAIL_SECURE_CONNECTION_TYPE.class
				.getEnumConstants();
		//[110705][I] WBT fix #178741
		if (swigValues == null) {
			return eEMAIL_SECURE_CONNECTION_TYPE_NONE;
		}
		//LGSI_CHANGE_PROTOCOL Shrey Chaturvedi 20 Nov 2013
		//it is modified to match the connection type values of providers.xml 

		for (EEMAIL_SECURE_CONNECTION_TYPE swigEnum : swigValues) {
			if (swigEnum.swigValue == swigValue) {
				return swigEnum;
			}
		}

		throw new IllegalArgumentException("No enum " + EEMAIL_SECURE_CONNECTION_TYPE.class
				+ " with value " + swigValue);
	}

	@SuppressWarnings("unused")
	private EEMAIL_SECURE_CONNECTION_TYPE() {
		this.swigValue = SwigNext.next++;
	}

	@SuppressWarnings("unused")
	private EEMAIL_SECURE_CONNECTION_TYPE(int swigValue) {
		this.swigValue = swigValue;
		SwigNext.next = swigValue + 1;
	}

	@SuppressWarnings("unused")
	private EEMAIL_SECURE_CONNECTION_TYPE(EEMAIL_SECURE_CONNECTION_TYPE swigEnum) {
		this.swigValue = swigEnum.swigValue;
		SwigNext.next = this.swigValue + 1;
	}

	private final int swigValue;

	private static class SwigNext {
		private static int next = 0;
	}

	/**
	 * LGE_CHANGE_PROTOCOL_BEGIN minwoo.hong 2014-5-8
	 * This method is use to backward compatibility. e.g PRI and Ready2Go
	 */
	@Deprecated
	public static EEMAIL_SECURE_CONNECTION_TYPE convertToEnum(int previousValue) {
		switch (previousValue) {
		case 0:
			return eEMAIL_SECURE_CONNECTION_TYPE_NONE;
		case 1:
			return eEMAIL_SECURE_CONNECTION_TYPE_SSL;
		case 2:
			return eEMAIL_SECURE_CONNECTION_TYPE_TLS;
		case 3:
			return eEMAIL_SECURE_CONNECTION_TYPE_TLS_IF_AVAILABLE;
		case 4:
			return eEMAIL_SECURE_CONNECTION_TYPE_SSL_TRUST_ALL;
		case 5:
			return eEMAIL_SECURE_CONNECTION_TYPE_TLS_TRUST_ALL;
		case 6:
			return eEMAIL_SECURE_CONNECTION_TYPE_TLS_TRUST_ALL_IF_AVAILABLE;
		default:
			return eEMAIL_SECURE_CONNECTION_TYPE_NONE;
		}
	}
	//LGE_CHANGE_PROTOCOL_END minwoo.hong 2014-5-8 convert host auth
}
